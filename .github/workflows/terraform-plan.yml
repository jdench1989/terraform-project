name: Terraform Plan

on:
    pull_request:
        branches: ["main"]

permissions: 
    contents: read
    pull-requests: write

jobs:
    terraform_plan:
        name: 'Terraform plan'
        runs-on: ubuntu-latest

        env: 
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        
        defaults:
            run:
                shell: bash

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                  terraform_version: 1.5.6

            - name: Terraform Init
              run: terraform init

            - name: Terraform Format
              run: terraform fmt

            - name: Terraform Plan
              run: terraform plan -input=false -out=tfplan

            - name: Convert Plan to Text
              run: terraform show -no-color tfplan > plan.txt
            
            - name: Comment Plan on PR
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const fs = require('fs');
                  const plan = fs.readFileSync('plan.txt', 'utf8');
                  const maxBodyLength = 65000;
            
                  const body = plan.length > maxBodyLength
                    ? "⚠️ Terraform plan output too long to display."
                    : `### 🛠 Terraform Plan Output\n\n\`\`\`\n${plan}\n\`\`\``;
            
                  const { data: comments } = await github.rest.issues.listComments({
                    ...context.repo,
                    issue_number: context.issue.number,
                  });
            
                  const existingComment = comments.find(c => c.user.login === 'github-actions[bot]' && c.body.startsWith('### 🛠 Terraform Plan Output'));
            
                  if (existingComment) {
                    await github.rest.issues.updateComment({
                      ...context.repo,
                      comment_id: existingComment.id,
                      body,
                    });
                  } else {
                    await github.rest.issues.createComment({
                      ...context.repo,
                      issue_number: context.issue.number,
                      body,
                    });
                  }
            

